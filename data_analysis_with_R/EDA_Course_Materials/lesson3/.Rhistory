if (length(x)>3) {
return(mean(x))
} else {
return(NA)
}}
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(age_cat=="adult")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0)
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0)
p_2 + stat_summary_hex(data=df_age[df_age$month %in% winter,], aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0)
p_2 + stat_summary_hex(data=df_age[df_age$month %in% spring,], aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0)
p_2 + stat_summary_hex(data=df_age[df_age$month %in% summer,], aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0)
p_2 + stat_summary_hex(data=df_age[df_age$month %in% fall,], aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0)
p_2 + stat_summary_hex(data=df_age[df_age$month %in% winter,], aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0)
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0)
filter <- function(x){
if (length(x)>15) {
return(mean(x))
} else {
return(NA)
}}
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0)
filter <- function(x){
if (length(x)>20) {
return(mean(x))
} else {
return(NA)
}}
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0)
filter <- function(x){
if (length(x)>30) {
return(mean(x))
} else {
return(NA)
}}
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0)
filter <- function(x){
if (length(x)>50) {
return(mean(x))
} else {
return(NA)
}}
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0)
filter <- function(x){
if (length(x)>35) {
return(mean(x))
} else {
return(NA)
}}
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0)
filter <- function(x){
if (length(x)>25) {
return(mean(x))
} else {
return(NA)
}}
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0)
filter <- function(x){
if (length(x)>20) {
return(mean(x))
} else {
return(NA)
}}
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0)
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_color_gradient(limits=c(0.25,0.75))
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradient(limits=c(0.25,0.75))
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradient(limits=c(0.45,0.55))
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradient(limits=c(0.10,0.90))
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradient(limits=c(0.40,0.60))
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill=NA, size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradient(limits=c(0.40,0.60))
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradient2(limits=c(0.40,0.60))
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradient2(low="red", high="blue", limits=c(0.40,0.60))
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradient2(low="red", high="blue", mid=0.5, limits=c(0.40,0.60))
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradient2(low="red", high="blue", mid=0.5)
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradientn(values=c(1, .6, .5, .4, 0), colours=c("red", "#770000", "black", "#007777", "cyan"))
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradientn(values=c(1, .5, 0), colours=c("red", "black", "cyan"))
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradientn(values=c(1, .6, .5, .4, 0), colours=c("red", "#770000", "black", "#007777", "cyan"))
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradientn(values=c(1, .6, .5, .4, 0), colours=c("white", "#770000", "white", "#007777", "white"))
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradientn(values=c(1, .6, .5, .4, 0), colours=c("#ff0101", "#770000", "white", "#007777", "#7FBBBB"))
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradientn(values=c(1, .6, .5, .4, 0), colours=c("#bb7f7f", "#770000", "white", "#007777", "#7FBBBB"))
p_2 + stat_summary_hex(data=df_age[df_age$month %in% spring,], aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradientn(values=c(1, .6, .5, .4, 0), colours=c("#bb7f7f", "#770000", "white", "#007777", "#7FBBBB"))
p_2 + stat_summary_hex(data=df_age[df_age$month %in% summer,], aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradientn(values=c(1, .6, .5, .4, 0), colours=c("#bb7f7f", "#770000", "white", "#007777", "#7FBBBB"))
p_2 + stat_summary_hex(data=df_age[df_age$month %in% fall,], aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradientn(values=c(1, .6, .5, .4, 0), colours=c("#bb7f7f", "#770000", "white", "#007777", "#7FBBBB"))
p_2 + stat_summary_hex(data=df_age[df_age$month %in% winter,], aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradientn(values=c(1, .6, .5, .4, 0), colours=c("#bb7f7f", "#770000", "white", "#007777", "#7FBBBB"))
df_no_senior <- df_age[df_age$age_cat != "senior",]
head(df_no_senior)
p_2 + stat_summary_hex(data=df_no_senior, aes(x=lng, y=lat, z=as.numeric(age_cat=="adult")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradientn(values=c(1, .6, .5, .4, 0), colours=c("#bb7f7f", "#770000", "white", "#007777", "#7FBBBB"))
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradientn(values=c(1, .6, .5, .4, 0), colours=c("#bb7f7f", "#770000", "white", "#007777", "#7FBBBB"))
p_2 + stat_summary_hex(data=df_age, aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradientn(values=c(1, .6, .5, .4, 0), colours=c("#bb7f7f", "#770000", "white", "#007777", "#7FBBBB"))
p_2 + stat_summary_hex(data=df_age[df_age$month %in% spring,], aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradientn(values=c(1, .6, .5, .4, 0), colours=c("#bb7f7f", "#770000", "white", "#007777", "#7FBBBB"))
p_2 + stat_summary_hex(data=df_age[df_age$month %in% summer,], aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradientn(values=c(1, .6, .5, .4, 0), colours=c("#bb7f7f", "#770000", "white", "#007777", "#7FBBBB"))
p_2 + stat_summary_hex(data=df_age[df_age$month %in% summer,], aes(x=lng, y=lat, z=as.numeric(gender_bucket=="Male")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradientn(values=c(1, .6, .5, .4, 0.2), colours=c("#bb7f7f", "#770000", "white", "#007777", "#7FBBBB"))
p_2 + stat_summary_hex(data=df_no_senior, aes(x=lng, y=lat, z=as.numeric(age_cat=="adult")), bins=50, alpha=0.95, fun= filter) + geom_polygon(aes(x=long, y=lat, group=group), fill='grey', size=.2,color='white', data=sf_d, alpha=0) + scale_fill_gradientn(values=c(1, .6, .5, .4, 0), colours=c("#bb7f7f", "#770000", "white", "#007777", "#7FBBBB"))
savehistory("~/Desktop/Project_GitHub/DSI_project/R_map/r_history.Rhistory")
source('~/Untitled.R')
source('~/Desktop/Project_GitHub/DSI_project/model/viz/create_map_viz.R')
source('~/Desktop/Project_GitHub/DSI_project/model/viz/create_map_viz.R')
install.packages(c("ggplot2", "ggmap", "rgdal"))
library(ggplot2) #must load the ggplot package first
data(diamonds) #
clarityGroups <- group_by(diamonds, clarity)
diamondsByClarity <- summarise(clarityGroups,
mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n())
library(dplyr)
clarityGroups <- group_by(diamonds, clarity)
diamondsByClarity <- summarise(clarityGroups,
mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n())
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
diamonds_mp_by_color
diamonds_mp_by_clarity
library(gridExtra)
library('grid.Extra')
install.packages('grid.Extra')
library(gridExtra)
library(grid.Extra)
install.packages('grid.Extra')
barplot(diamonds_by_color$mean_price, diamonds_by_color$color)
diamonds_by_color$mean_price
diamonds_by_color
diamonds_mp_by_color
diamonds_mp_by_color$mean_price
barplot(diamonds_mp_by_color$mean_price, diamonds_mp_by_color$color)
diamonds_mp_by_color$color
order(diamonds_mp_by_color$color)
diamonds_mp_by_color[order(diamonds_mp_by_color$color), 0]
order(diamonds_mp_by_color$color)
diamonds_mp_by_color[order(diamonds_mp_by_color$color)]
barplot(diamonds_mp_by_color$mean_price, names.arg = diamonds_mp_by_color$color)
b1 <- barplot(diamonds_mp_by_color$mean_price, names.arg = diamonds_mp_by_color$color)
b2 <- barplot(diamonds_mp_by_clarity$mean_price, names.arg = diamonds_mp_by_clarity$clarity)
grid.arrange(b1, b2, ncol = 1)
install.packages('gridExtra')
library(gridExtra)
grid.arrange(b1, b2, ncol = 1)
b1 <- barplot(diamonds_mp_by_color$mean_price, names.arg = diamonds_mp_by_color$color)
b2 <- barplot(diamonds_mp_by_clarity$mean_price, names.arg = diamonds_mp_by_clarity$clarity)
grid.arrange(b1, b2, ncol = 1)
b1
barplot(diamonds_mp_by_color$mean_price, names.arg = diamonds_mp_by_color$color)
barplot(diamonds_mp_by_clarity$mean_price, names.arg = diamonds_mp_by_clarity$clarity)
barplot(diamonds_mp_by_color$mean_price, names.arg = diamonds_mp_by_color$color)
barplot(diamonds_mp_by_clarity$mean_price, names.arg = diamonds_mp_by_clarity$clarity)
str(diamonds)
diamonds_by_cut <- group_by(diamonds, cut)
diamonds_mp_by_cut <- summarise(diamonds_by_cut, mean_price = mean(price))
barplot(diamonds_mp_by_cut$mean_price, names.arg = diamonds_mp_by_cut$cut)
setwd('/Users/Warren/Desktop/Udacity/data_analysis_with_R/indicator_age_of_marriage.csv')
list.files()
marriage <- read.csv('Data-Table 1.csv', header = T, row.names = 1, check.names = F)
str(marriage)
marriage$`2005`
marriage$`2004`
marriage$`2005`
qplot(x = `2005`, data = marriage)
qplot(x = `2005`, data = marriage, geom = 'freqpoly')
setwd('/Users/Warren/Desktop/Udacity/data_analysis_with_R/indicator SP_URB_TOTL/')
list.files()
urb_pop <- read.csv('Data-Table 1.csv', header = T, row.names = 1, check.names = F)
setwd('/Users/Warren/Desktop/Udacity/data_analysis_with_R/indicator CDIAC carbon_dioxide_total_emissions/')
list.files()
carbon_emission <- read.csv('Data-Table 1.csv', header = T, row.names = 1, check.names = F)
View(carbon_emission)
View(carbon_emission)
carbon_emission$`2005`
carbon_emission$`2006`
carbon_emission$`2003`
carbon_emission$`2004`
urb_pop$`2004`
View(carbon_emission)
View(carbon_emission)
View(urb_pop)
carbon_urb_pop <- merge(carbon_emission, urb_pop, by=0, all=TRUE)
carbon_urb_pop
col(carbon_urb_pop, as.factor = TRUE)
ggplot(aes(x = `2005.x`, y = `2005.y`), data = carbon_urb_pop) + geom_point()
ggplot(aes(x = `2005.x`, y = `2005.y`), data = carbon_urb_pop) + geom_point() +
xlim(0, quantile(carbon_urb_pop$`2005.x`, 0.99)) +
ylim(0, quantile(carbon_urb_pop$`2005.y`, 0.99))
ggplot(aes(x = `2005.x`, y = `2005.y`), data = subset(carbon_urb_pop, !is.na(gender)) + geom_point() +
xlim(0, 2000000) +
ylim(0, 200000000)
carbon_urb_pop <- merge(carbon_emission, urb_pop, by=0, all=TRUE)
ggplot(aes(x = `2005.x`, y = `2005.y`), data = subset(carbon_urb_pop, !is.na(gender)) + geom_point() +
xlim(0, 2000000) +
ylim(0, 200000000)
ggplot(aes(x = `2005.x`, y = `2005.y`), data = carbon_urb_pop) + geom_point() +
xlim(0, 2000000) +
ylim(0, 200000000)
ggplot(aes(x = `2005.x`, y = `2005.y`), data = carbon_urb_pop) + geom_point(alpha = 1/20) +
xlim(0, 2000000) +
ylim(0, 200000000)
ggplot(aes(x = `2005.x`, y = `2005.y`), data = carbon_urb_pop) + geom_point(alpha = 1/10) +
xlim(0, 2000000) +
ylim(0, 200000000)
ggplot(aes(x = `2005.x`, y = `2005.y`), data = carbon_urb_pop) + geom_point(alpha = 1/5) +
xlim(0, 2000000) +
ylim(0, 200000000)
ggplot(aes(x = `2005.x`, y = `2005.y`), data = carbon_urb_pop) + geom_point(alpha = 1/5) +
xlim(0, 5000000) +
ylim(0, 50000000)
ggplot(aes(x = `2005.x`, y = `2005.y`), data = carbon_urb_pop) + geom_point(alpha = 1/5) +
xlim(0, 5000000) +
ylim(0, 1000000)
ggplot(aes(x = `2005.x`, y = `2005.y`), data = carbon_urb_pop) + geom_point(alpha = 1/5) +
xlim(0, 50000000) +
ylim(0, 5000000)
ggplot(aes(x = `2005.x`, y = `2005.y`), data = carbon_urb_pop) + geom_point(alpha = 1/5) +
xlim(0, 2000000) +
ylim(0, 200000000)
ggplot(aes(x = `2005.x`, y = `2005.y`), data = carbon_urb_pop) + geom_point(alpha = 1/5) +
xlim(0, 500000) +
ylim(0, 50000000)
cor.test(carbon_urb_pop$`2005.x`, carbon_urb_pop$`2005.y`)
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_histogram()
pf
getwd()
list.files()
setwd('/Users/Warren/Desktop/Udacity/EDA_Course_Materials/lesson3')
list.files()
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_histogram()
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_boxplot()
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_boxplot() +
stat_summary(fun.y = mean, geom = 'point', shape =  4)
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(gender))) +
geom_line(aes(color = gender), stat = 'summary', fun.y = median)
age_gender_groups <- group_by(pf, age, gender)
pf.fc_by_age_gender <- summarise(age_gender_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
pf.fc_by_age_gender <- arrange(pf.fc_by_age_gender, age)
pf.fc_by_age_gender
pf.fc_by_age_gender <- pf %.%
filter(!is.na(gender)) %.%
group_by(age, gender) %.%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %.%
ungroup() %.%
arrange(age)
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
ungroup() %>%
arrange(age)
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
ungroup() %>%
arrange(age)
pf.fc_by_age_gender
pf.fc_by_age_gender <- pf %>%
group_by(age, gender) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
ungroup() %>%
arrange(age)
ggplot(aes(age, friend_count_mean), data = pf.fc_by_age_gender) +
geom_line(aes(color = gender))
ggplot(aes(age, friend_count_mean), data = pf.fc_by_age_gender) +
geom_line(aes(color = gender))
ggplot(aes(age, friend_count_mean), data = pf.fc_by_age_gender, color = gender) +
geom_line()
ggplot(aes(x = age, y = friend_count_mean, color = gender), data = pf.fc_by_age_gender) +
geom_line()
ggplot(aes(x = age, y = friend_count_mean, color = gender), data = pf.fc_by_age_gender) +
geom_line(aes(color = gender))
install.packages('reshape2')
library(reshape2)
install.packages("reshape2")
library(reshape2)
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = 'median_friend_count')
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = "median_friend_count")
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = 'median_friend_count')
pf.fc_by_age_gender
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = 'friend_count_median')
head(pf.fc_by_age_gender.wide)
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
ungroup() %>%
arrange(age)
pf %>% filter(!is.na(gender))
pf
str(pf)
is.na(pf$gender)
pf.fc_by_age_gender <- pf %>%
filter(!is.na(pf$gender)) %>%
group_by(age, gender) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
ungroup() %>%
arrange(age)
pf.fc_by_age_gender.wide$female / pf.fc_by_age_gender.wide$male
ggplot(aes(ratio), data = pf.fc_by_age_gender.wide) + geom_line() +
geom_hline(1)
?geom_hline
ggplot(aes(ratio), data = pf.fc_by_age_gender.wide) + geom_line() +
geom_hline(aes(yintercept = 1))
pf.fc_by_age_gender.wide$ratio <-
pf.fc_by_age_gender.wide$female / pf.fc_by_age_gender.wide$male
ggplot(aes(ratio), data = pf.fc_by_age_gender.wide) + geom_line() +
geom_hline(aes(yintercept = 1))
ggplot(aes(x = age, y = ratio), data = pf.fc_by_age_gender.wide) + geom_line() +
geom_hline(aes(yintercept = 1))
ggplot(aes(x = age, y = ratio), data = pf.fc_by_age_gender.wide) + geom_line() +
geom_hline(aes(yintercept = 1), 2)
ggplot(aes(x = age, y = ratio), data = pf.fc_by_age_gender.wide) + geom_line() +
geom_hline(aes(yintercept = 1), linetype = 2)
pf$tenure
pf$tenure/365
ceiling(pf$tenure/365)
head(pf$tenure/365)
head(ceiling(pf$tenure/365))
2014 - ceiling(pf$tenure/365)
pf$year_joined <- 2014 - ceiling(pf$tenure/365)
floor(2014 - pf$tenure/365)
head(floor(2014 - pf$tenure/365))
head(pf$year_joined)
table(pf$year_joined)
?cut
c((2001, 2003), (2003, 2004))
d.bucket <- cut(pf$year_joined,
breaks = c(2004, 2009, 2011, 2012, 2014))
pf$year_joined.bucket <- cut(pf$year_joined,
breaks = c(2004, 2009, 2011, 2012, 2014))
pf$year_joined.bucket
ggplot(aes(x = age, y = friend_count),
data = pf) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median)
ggplot(aes(x = age, y = friend_count),
data = pf) +
geom_line(aes(color = year_joined.bucket), stat = 'summary', fun.y = median) +
geom_line(stat = 'summary', fun.y = mean)
with(subset(pf, tenure >= 1), summary(friend_count / tenure))
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket))
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
ggplot(aes(x = 7 * round(tenure / 7), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean) + geom_smooth()
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_smooth(aes(color = year_joined.bucket))
getwd()
setwd('/Users/Warren/Desktop/Udacity/EDA_Course_Materials/lesson5')
list.files()
yo <- read.csv('yogurt.csv')
str(yo)
yo$id <- factor(yo$id)
str(yo)
qplot(price, data = yo)
table(yo$price)
qplot(price, data = yo, binwidth = 10)
length(unique(yo$price))
?transform
str(yo)
transform(yo, all.purchases = strawberry + blueberry + pina.colada + plain +
mixed.berry)
yo <- transform(yo, all.purchases = strawberry + blueberry + pina.colada + plain +
mixed.berry)
qplot(data = yo, x = all.purchases)
ggplot(aes(x = time, y = price), data = yo) +
geom_jitter(alpha = 1/4, shape = 21)
set.seed(4230)
sample.ids <- sample(levels(yo$id), 16)
ggplot(aes(x = time, y = price),
data = subset(yo, id %in% sample.ids)) +
facet_wrap(~id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
set.seed(4220)
sample.ids <- sample(levels(yo$id), 16)
ggplot(aes(x = time, y = price),
data = subset(yo, id %in% sample.ids)) +
facet_wrap(~id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
install.packages("GGally")
library(GGally)
theme_set(theme_minimal(20))
set.seed(1836)
pf_subset <- pf[, c(2:15)]
names(pf_subset)
ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000), ])
list.files()
nci <- read.table("nci.tsv")
colnames(nci) <- c(1:64)
library(reshape2)
nci.long.samp <- melt(as.matrix(nci[1:200,]))
names(nci.long.samp) <- c("gene", "case", "value")
head(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(100))
library(ggplot2) #must load the ggplot package first
data(diamonds) #loads the diamonds data set since it comes with the ggplot package
summary(diamonds)
str(diamonds)
# Create a histogram of the price of
# all the diamonds in the diamond data set.
qplot(x=price, data=diamonds)
qplot(x=price, data=diamonds) + facet_wrap(~color)
qplot(x=price, data=diamonds) + facet_wrap(~color) + geom_histogram(aes(color=cut))
qplot(x=price, data=diamonds, color=cut) + facet_wrap(~color)
qplot(x=price, data=diamonds, color=cut) + facet_wrap(~color) +
scale_x_log10()
qplot(x=price, data=diamonds, color=cut) + facet_wrap(~color) +
scale_x_log10() + scale_fill_brewer(type = 'qual')
ggplot(aes(x = price, y = carat, color=cut), data = diamonds) + geom_point()
ggplot(aes(x = price, y = table, color=cut), data = diamonds) + geom_point()
ggplot(aes(x = table, y = price, color=cut), data = diamonds) + geom_point()
str(diamonds)
?diamonds
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
ggplot(aes(x = volume, y = price, color=clarity), data = diamonds) +
geom_point()
ggplot(aes(x = volume, y = price, color=clarity), data = diamonds) +
geom_point() + scale_x_log10()
ggplot(aes(x = volume, y = price, color=clarity), data = diamonds) +
geom_point() + scale_y_log10()
ggplot(aes(x = volume, y = price, color=clarity), data = diamonds) +
geom_point() + scale_y_log10() + scale_x_log10() +
scale_fill_brewer(type = 'div')
ggplot(aes(x = volume, y = price, color=clarity), data = diamonds) +
geom_point() + scale_y_log10() + scale_x_log10() +
scale_fill_brewer(type = 'div') + xlim(0, quantile(diamonds$volume, 0.99))
getwd()
setwd('/Users/Warren/Desktop/Udacity/EDA_Course_Materials/lesson3')
list.files()
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
str(pf)
pf$prop_initiated <- pf$friend_count / pf$friendships_initiated
pf$prop_initiated
pf$prop_initiated <- pf$friendships_initiated / pf$friend_count
pf$prop_initiated
pf$year_joined.bucket <- cut(pf$year_joined,
breaks = c(2004, 2009, 2011, 2012, 2014))
pf$year_joined <- 2014 - ceiling(pf$tenure/365)
pf$year_joined.bucket <- cut(pf$year_joined,
breaks = c(2004, 2009, 2011, 2012, 2014))
pf$tenure
summary(pf$tenure)
pf.fc_by_tenure <- pf %>%
group_by(tenure) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
pf.fc_by_tenure
pf.fc_by_tenure <- pf %>%
group_by(tenure) %>%
summarise(prop_initiated_median = median(prop_initiated),
n = n())
pf.fc_by_tenure
pf.fc_by_tenure <- pf %>%
filter(!is.na(prop_initiated)) %<%
group_by(tenure) %>%
summarise(prop_initiated_median = median(prop_initiated),
n = n())
pf.fc_by_tenure <- pf %>%
filter(!is.na(prop_initiated)) %>%
group_by(tenure) %>%
summarise(prop_initiated_median = median(prop_initiated),
n = n())
summary(pf$prop_initiated)
